
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class yc_fwd_list_cisco_route_static__route_vrf_ip_route_interface_forwarding_list_fwd_list(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module cisco-route-static - based on the path /route/vrf/ip-route-interface-forwarding-list/fwd-list. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of IPv4 next-hop addresses associated with an IPv4 prefix
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__fwd','__forwarding_router_adr','__metric','__name','__tag','__track','__permanent',)

  _yang_name = 'fwd-list'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='string', is_config=True)
    self.__fwd = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),unicode,], is_leaf=True, yang_name="fwd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='ip-next-hop', is_config=True)
    self.__metric = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)
    self.__forwarding_router_adr = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="forwarding-router-adr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='inet:ipv4-address', is_config=True)
    self.__tag = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="tag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)
    self.__track = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="track", parent=self, choice=(u'track-or-perm', u'track'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)
    self.__permanent = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="permanent", parent=self, choice=(u'track-or-perm', u'permanent'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='empty', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'route', u'vrf', u'ip-route-interface-forwarding-list', u'fwd-list']

  def _get_fwd(self):
    """
    Getter method for fwd, mapped from YANG variable /route/vrf/ip_route_interface_forwarding_list/fwd_list/fwd (ip-next-hop)
    """
    return self.__fwd
      
  def _set_fwd(self, v, load=False):
    """
    Setter method for fwd, mapped from YANG variable /route/vrf/ip_route_interface_forwarding_list/fwd_list/fwd (ip-next-hop)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fwd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fwd() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),unicode,], is_leaf=True, yang_name="fwd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='ip-next-hop', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fwd must be of a type compatible with ip-next-hop""",
          'defined-type': "cisco-route-static:ip-next-hop",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),unicode,], is_leaf=True, yang_name="fwd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='ip-next-hop', is_config=True)""",
        })

    self.__fwd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fwd(self):
    self.__fwd = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),unicode,], is_leaf=True, yang_name="fwd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='ip-next-hop', is_config=True)


  def _get_forwarding_router_adr(self):
    """
    Getter method for forwarding_router_adr, mapped from YANG variable /route/vrf/ip_route_interface_forwarding_list/fwd_list/forwarding_router_adr (inet:ipv4-address)
    """
    return self.__forwarding_router_adr
      
  def _set_forwarding_router_adr(self, v, load=False):
    """
    Setter method for forwarding_router_adr, mapped from YANG variable /route/vrf/ip_route_interface_forwarding_list/fwd_list/forwarding_router_adr (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_forwarding_router_adr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_forwarding_router_adr() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="forwarding-router-adr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """forwarding_router_adr must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="forwarding-router-adr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__forwarding_router_adr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_forwarding_router_adr(self):
    self.__forwarding_router_adr = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="forwarding-router-adr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='inet:ipv4-address', is_config=True)


  def _get_metric(self):
    """
    Getter method for metric, mapped from YANG variable /route/vrf/ip_route_interface_forwarding_list/fwd_list/metric (uint8)
    """
    return self.__metric
      
  def _set_metric(self, v, load=False):
    """
    Setter method for metric, mapped from YANG variable /route/vrf/ip_route_interface_forwarding_list/fwd_list/metric (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_metric() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """metric must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)""",
        })

    self.__metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_metric(self):
    self.__metric = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)


  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /route/vrf/ip_route_interface_forwarding_list/fwd_list/name (string)
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /route/vrf/ip_route_interface_forwarding_list/fwd_list/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='string', is_config=True)


  def _get_tag(self):
    """
    Getter method for tag, mapped from YANG variable /route/vrf/ip_route_interface_forwarding_list/fwd_list/tag (uint8)
    """
    return self.__tag
      
  def _set_tag(self, v, load=False):
    """
    Setter method for tag, mapped from YANG variable /route/vrf/ip_route_interface_forwarding_list/fwd_list/tag (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tag is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tag() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="tag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tag must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="tag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)""",
        })

    self.__tag = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tag(self):
    self.__tag = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="tag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)


  def _get_track(self):
    """
    Getter method for track, mapped from YANG variable /route/vrf/ip_route_interface_forwarding_list/fwd_list/track (uint8)
    """
    return self.__track
      
  def _set_track(self, v, load=False):
    """
    Setter method for track, mapped from YANG variable /route/vrf/ip_route_interface_forwarding_list/fwd_list/track (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_track is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_track() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="track", parent=self, choice=(u'track-or-perm', u'track'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """track must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="track", parent=self, choice=(u'track-or-perm', u'track'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)""",
        })

    self.__track = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_track(self):
    self.__track = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="track", parent=self, choice=(u'track-or-perm', u'track'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)


  def _get_permanent(self):
    """
    Getter method for permanent, mapped from YANG variable /route/vrf/ip_route_interface_forwarding_list/fwd_list/permanent (empty)
    """
    return self.__permanent
      
  def _set_permanent(self, v, load=False):
    """
    Setter method for permanent, mapped from YANG variable /route/vrf/ip_route_interface_forwarding_list/fwd_list/permanent (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_permanent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_permanent() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="permanent", parent=self, choice=(u'track-or-perm', u'permanent'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """permanent must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="permanent", parent=self, choice=(u'track-or-perm', u'permanent'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='empty', is_config=True)""",
        })

    self.__permanent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_permanent(self):
    self.__permanent = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="permanent", parent=self, choice=(u'track-or-perm', u'permanent'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='empty', is_config=True)

  fwd = __builtin__.property(_get_fwd, _set_fwd)
  forwarding_router_adr = __builtin__.property(_get_forwarding_router_adr, _set_forwarding_router_adr)
  metric = __builtin__.property(_get_metric, _set_metric)
  name = __builtin__.property(_get_name, _set_name)
  tag = __builtin__.property(_get_tag, _set_tag)
  track = __builtin__.property(_get_track, _set_track)
  permanent = __builtin__.property(_get_permanent, _set_permanent)

  __choices__ = {u'track-or-perm': {u'track': [u'track'], u'permanent': [u'permanent']}}
  _pyangbind_elements = {'fwd': fwd, 'forwarding_router_adr': forwarding_router_adr, 'metric': metric, 'name': name, 'tag': tag, 'track': track, 'permanent': permanent, }


class yc_ip_route_interface_forwarding_list_cisco_route_static__route_vrf_ip_route_interface_forwarding_list(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module cisco-route-static - based on the path /route/vrf/ip-route-interface-forwarding-list. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of static IP routes. Each destination is uniquely identified by a combination of IP prefix and netmask
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__prefix','__mask','__fwd_list',)

  _yang_name = 'ip-route-interface-forwarding-list'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='inet:ipv4-address', is_config=True)
    self.__mask = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'}), is_leaf=True, yang_name="mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='yang:dotted-quad', is_config=True)
    self.__fwd_list = YANGDynClass(base=YANGListType("fwd",yc_fwd_list_cisco_route_static__route_vrf_ip_route_interface_forwarding_list_fwd_list, yang_name="fwd-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='fwd', extensions=None), is_container='list', yang_name="fwd-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'route', u'vrf', u'ip-route-interface-forwarding-list']

  def _get_prefix(self):
    """
    Getter method for prefix, mapped from YANG variable /route/vrf/ip_route_interface_forwarding_list/prefix (inet:ipv4-address)

    YANG Description: IPv4 network address
    """
    return self.__prefix
      
  def _set_prefix(self, v, load=False):
    """
    Setter method for prefix, mapped from YANG variable /route/vrf/ip_route_interface_forwarding_list/prefix (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix() directly.

    YANG Description: IPv4 network address
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix(self):
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='inet:ipv4-address', is_config=True)


  def _get_mask(self):
    """
    Getter method for mask, mapped from YANG variable /route/vrf/ip_route_interface_forwarding_list/mask (yang:dotted-quad)

    YANG Description: IPv4 network mask
    """
    return self.__mask
      
  def _set_mask(self, v, load=False):
    """
    Setter method for mask, mapped from YANG variable /route/vrf/ip_route_interface_forwarding_list/mask (yang:dotted-quad)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mask is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mask() directly.

    YANG Description: IPv4 network mask
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'}), is_leaf=True, yang_name="mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='yang:dotted-quad', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mask must be of a type compatible with yang:dotted-quad""",
          'defined-type': "yang:dotted-quad",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'}), is_leaf=True, yang_name="mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='yang:dotted-quad', is_config=True)""",
        })

    self.__mask = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mask(self):
    self.__mask = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'}), is_leaf=True, yang_name="mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='yang:dotted-quad', is_config=True)


  def _get_fwd_list(self):
    """
    Getter method for fwd_list, mapped from YANG variable /route/vrf/ip_route_interface_forwarding_list/fwd_list (list)

    YANG Description: List of IPv4 next-hop addresses associated with an IPv4 prefix
    """
    return self.__fwd_list
      
  def _set_fwd_list(self, v, load=False):
    """
    Setter method for fwd_list, mapped from YANG variable /route/vrf/ip_route_interface_forwarding_list/fwd_list (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fwd_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fwd_list() directly.

    YANG Description: List of IPv4 next-hop addresses associated with an IPv4 prefix
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("fwd",yc_fwd_list_cisco_route_static__route_vrf_ip_route_interface_forwarding_list_fwd_list, yang_name="fwd-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='fwd', extensions=None), is_container='list', yang_name="fwd-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fwd_list must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("fwd",yc_fwd_list_cisco_route_static__route_vrf_ip_route_interface_forwarding_list_fwd_list, yang_name="fwd-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='fwd', extensions=None), is_container='list', yang_name="fwd-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='list', is_config=True)""",
        })

    self.__fwd_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fwd_list(self):
    self.__fwd_list = YANGDynClass(base=YANGListType("fwd",yc_fwd_list_cisco_route_static__route_vrf_ip_route_interface_forwarding_list_fwd_list, yang_name="fwd-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='fwd', extensions=None), is_container='list', yang_name="fwd-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='list', is_config=True)

  prefix = __builtin__.property(_get_prefix, _set_prefix)
  mask = __builtin__.property(_get_mask, _set_mask)
  fwd_list = __builtin__.property(_get_fwd_list, _set_fwd_list)


  _pyangbind_elements = {'prefix': prefix, 'mask': mask, 'fwd_list': fwd_list, }


class yc_vrf_cisco_route_static__route_vrf(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module cisco-route-static - based on the path /route/vrf. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of VRF static routes
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__name','__ip_route_interface_forwarding_list',)

  _yang_name = 'vrf'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='string', is_config=True)
    self.__ip_route_interface_forwarding_list = YANGDynClass(base=YANGListType("prefix mask",yc_ip_route_interface_forwarding_list_cisco_route_static__route_vrf_ip_route_interface_forwarding_list, yang_name="ip-route-interface-forwarding-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='prefix mask', extensions=None), is_container='list', yang_name="ip-route-interface-forwarding-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'route', u'vrf']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /route/vrf/name (string)
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /route/vrf/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='string', is_config=True)


  def _get_ip_route_interface_forwarding_list(self):
    """
    Getter method for ip_route_interface_forwarding_list, mapped from YANG variable /route/vrf/ip_route_interface_forwarding_list (list)

    YANG Description: List of static IP routes. Each destination is uniquely identified by a combination of IP prefix and netmask
    """
    return self.__ip_route_interface_forwarding_list
      
  def _set_ip_route_interface_forwarding_list(self, v, load=False):
    """
    Setter method for ip_route_interface_forwarding_list, mapped from YANG variable /route/vrf/ip_route_interface_forwarding_list (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_route_interface_forwarding_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_route_interface_forwarding_list() directly.

    YANG Description: List of static IP routes. Each destination is uniquely identified by a combination of IP prefix and netmask
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("prefix mask",yc_ip_route_interface_forwarding_list_cisco_route_static__route_vrf_ip_route_interface_forwarding_list, yang_name="ip-route-interface-forwarding-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='prefix mask', extensions=None), is_container='list', yang_name="ip-route-interface-forwarding-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_route_interface_forwarding_list must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("prefix mask",yc_ip_route_interface_forwarding_list_cisco_route_static__route_vrf_ip_route_interface_forwarding_list, yang_name="ip-route-interface-forwarding-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='prefix mask', extensions=None), is_container='list', yang_name="ip-route-interface-forwarding-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='list', is_config=True)""",
        })

    self.__ip_route_interface_forwarding_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_route_interface_forwarding_list(self):
    self.__ip_route_interface_forwarding_list = YANGDynClass(base=YANGListType("prefix mask",yc_ip_route_interface_forwarding_list_cisco_route_static__route_vrf_ip_route_interface_forwarding_list, yang_name="ip-route-interface-forwarding-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='prefix mask', extensions=None), is_container='list', yang_name="ip-route-interface-forwarding-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='list', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  ip_route_interface_forwarding_list = __builtin__.property(_get_ip_route_interface_forwarding_list, _set_ip_route_interface_forwarding_list)


  _pyangbind_elements = {'name': name, 'ip_route_interface_forwarding_list': ip_route_interface_forwarding_list, }


class yc_fwd_list_cisco_route_static__route_ip_route_interface_forwarding_list_fwd_list(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module cisco-route-static - based on the path /route/ip-route-interface-forwarding-list/fwd-list. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of IPv4 next-hop addresses associated with an IPv4 prefix
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__fwd','__forwarding_router_adr','__metric','__name','__tag','__track','__permanent',)

  _yang_name = 'fwd-list'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='string', is_config=True)
    self.__fwd = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),unicode,], is_leaf=True, yang_name="fwd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='ip-next-hop', is_config=True)
    self.__metric = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)
    self.__forwarding_router_adr = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="forwarding-router-adr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='inet:ipv4-address', is_config=True)
    self.__tag = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="tag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)
    self.__track = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="track", parent=self, choice=(u'track-or-perm', u'track'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)
    self.__permanent = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="permanent", parent=self, choice=(u'track-or-perm', u'permanent'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='empty', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'route', u'ip-route-interface-forwarding-list', u'fwd-list']

  def _get_fwd(self):
    """
    Getter method for fwd, mapped from YANG variable /route/ip_route_interface_forwarding_list/fwd_list/fwd (ip-next-hop)
    """
    return self.__fwd
      
  def _set_fwd(self, v, load=False):
    """
    Setter method for fwd, mapped from YANG variable /route/ip_route_interface_forwarding_list/fwd_list/fwd (ip-next-hop)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fwd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fwd() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),unicode,], is_leaf=True, yang_name="fwd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='ip-next-hop', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fwd must be of a type compatible with ip-next-hop""",
          'defined-type': "cisco-route-static:ip-next-hop",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),unicode,], is_leaf=True, yang_name="fwd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='ip-next-hop', is_config=True)""",
        })

    self.__fwd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fwd(self):
    self.__fwd = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),unicode,], is_leaf=True, yang_name="fwd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='ip-next-hop', is_config=True)


  def _get_forwarding_router_adr(self):
    """
    Getter method for forwarding_router_adr, mapped from YANG variable /route/ip_route_interface_forwarding_list/fwd_list/forwarding_router_adr (inet:ipv4-address)
    """
    return self.__forwarding_router_adr
      
  def _set_forwarding_router_adr(self, v, load=False):
    """
    Setter method for forwarding_router_adr, mapped from YANG variable /route/ip_route_interface_forwarding_list/fwd_list/forwarding_router_adr (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_forwarding_router_adr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_forwarding_router_adr() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="forwarding-router-adr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """forwarding_router_adr must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="forwarding-router-adr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__forwarding_router_adr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_forwarding_router_adr(self):
    self.__forwarding_router_adr = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="forwarding-router-adr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='inet:ipv4-address', is_config=True)


  def _get_metric(self):
    """
    Getter method for metric, mapped from YANG variable /route/ip_route_interface_forwarding_list/fwd_list/metric (uint8)
    """
    return self.__metric
      
  def _set_metric(self, v, load=False):
    """
    Setter method for metric, mapped from YANG variable /route/ip_route_interface_forwarding_list/fwd_list/metric (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_metric() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """metric must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)""",
        })

    self.__metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_metric(self):
    self.__metric = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)


  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /route/ip_route_interface_forwarding_list/fwd_list/name (string)
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /route/ip_route_interface_forwarding_list/fwd_list/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='string', is_config=True)


  def _get_tag(self):
    """
    Getter method for tag, mapped from YANG variable /route/ip_route_interface_forwarding_list/fwd_list/tag (uint8)
    """
    return self.__tag
      
  def _set_tag(self, v, load=False):
    """
    Setter method for tag, mapped from YANG variable /route/ip_route_interface_forwarding_list/fwd_list/tag (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tag is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tag() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="tag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tag must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="tag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)""",
        })

    self.__tag = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tag(self):
    self.__tag = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="tag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)


  def _get_track(self):
    """
    Getter method for track, mapped from YANG variable /route/ip_route_interface_forwarding_list/fwd_list/track (uint8)
    """
    return self.__track
      
  def _set_track(self, v, load=False):
    """
    Setter method for track, mapped from YANG variable /route/ip_route_interface_forwarding_list/fwd_list/track (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_track is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_track() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="track", parent=self, choice=(u'track-or-perm', u'track'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """track must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="track", parent=self, choice=(u'track-or-perm', u'track'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)""",
        })

    self.__track = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_track(self):
    self.__track = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="track", parent=self, choice=(u'track-or-perm', u'track'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='uint8', is_config=True)


  def _get_permanent(self):
    """
    Getter method for permanent, mapped from YANG variable /route/ip_route_interface_forwarding_list/fwd_list/permanent (empty)
    """
    return self.__permanent
      
  def _set_permanent(self, v, load=False):
    """
    Setter method for permanent, mapped from YANG variable /route/ip_route_interface_forwarding_list/fwd_list/permanent (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_permanent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_permanent() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="permanent", parent=self, choice=(u'track-or-perm', u'permanent'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """permanent must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="permanent", parent=self, choice=(u'track-or-perm', u'permanent'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='empty', is_config=True)""",
        })

    self.__permanent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_permanent(self):
    self.__permanent = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="permanent", parent=self, choice=(u'track-or-perm', u'permanent'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='empty', is_config=True)

  fwd = __builtin__.property(_get_fwd, _set_fwd)
  forwarding_router_adr = __builtin__.property(_get_forwarding_router_adr, _set_forwarding_router_adr)
  metric = __builtin__.property(_get_metric, _set_metric)
  name = __builtin__.property(_get_name, _set_name)
  tag = __builtin__.property(_get_tag, _set_tag)
  track = __builtin__.property(_get_track, _set_track)
  permanent = __builtin__.property(_get_permanent, _set_permanent)

  __choices__ = {u'track-or-perm': {u'track': [u'track'], u'permanent': [u'permanent']}}
  _pyangbind_elements = {'fwd': fwd, 'forwarding_router_adr': forwarding_router_adr, 'metric': metric, 'name': name, 'tag': tag, 'track': track, 'permanent': permanent, }


class yc_ip_route_interface_forwarding_list_cisco_route_static__route_ip_route_interface_forwarding_list(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module cisco-route-static - based on the path /route/ip-route-interface-forwarding-list. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of static IP routes. Each destination is uniquely identified by a combination of IP prefix and netmask
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__prefix','__mask','__fwd_list',)

  _yang_name = 'ip-route-interface-forwarding-list'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='inet:ipv4-address', is_config=True)
    self.__mask = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'}), is_leaf=True, yang_name="mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='yang:dotted-quad', is_config=True)
    self.__fwd_list = YANGDynClass(base=YANGListType("fwd",yc_fwd_list_cisco_route_static__route_ip_route_interface_forwarding_list_fwd_list, yang_name="fwd-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='fwd', extensions=None), is_container='list', yang_name="fwd-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'route', u'ip-route-interface-forwarding-list']

  def _get_prefix(self):
    """
    Getter method for prefix, mapped from YANG variable /route/ip_route_interface_forwarding_list/prefix (inet:ipv4-address)

    YANG Description: IPv4 network address
    """
    return self.__prefix
      
  def _set_prefix(self, v, load=False):
    """
    Setter method for prefix, mapped from YANG variable /route/ip_route_interface_forwarding_list/prefix (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix() directly.

    YANG Description: IPv4 network address
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix(self):
    self.__prefix = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='inet:ipv4-address', is_config=True)


  def _get_mask(self):
    """
    Getter method for mask, mapped from YANG variable /route/ip_route_interface_forwarding_list/mask (yang:dotted-quad)

    YANG Description: IPv4 network mask
    """
    return self.__mask
      
  def _set_mask(self, v, load=False):
    """
    Setter method for mask, mapped from YANG variable /route/ip_route_interface_forwarding_list/mask (yang:dotted-quad)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mask is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mask() directly.

    YANG Description: IPv4 network mask
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'}), is_leaf=True, yang_name="mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='yang:dotted-quad', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mask must be of a type compatible with yang:dotted-quad""",
          'defined-type': "yang:dotted-quad",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'}), is_leaf=True, yang_name="mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='yang:dotted-quad', is_config=True)""",
        })

    self.__mask = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mask(self):
    self.__mask = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'}), is_leaf=True, yang_name="mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='yang:dotted-quad', is_config=True)


  def _get_fwd_list(self):
    """
    Getter method for fwd_list, mapped from YANG variable /route/ip_route_interface_forwarding_list/fwd_list (list)

    YANG Description: List of IPv4 next-hop addresses associated with an IPv4 prefix
    """
    return self.__fwd_list
      
  def _set_fwd_list(self, v, load=False):
    """
    Setter method for fwd_list, mapped from YANG variable /route/ip_route_interface_forwarding_list/fwd_list (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fwd_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fwd_list() directly.

    YANG Description: List of IPv4 next-hop addresses associated with an IPv4 prefix
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("fwd",yc_fwd_list_cisco_route_static__route_ip_route_interface_forwarding_list_fwd_list, yang_name="fwd-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='fwd', extensions=None), is_container='list', yang_name="fwd-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fwd_list must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("fwd",yc_fwd_list_cisco_route_static__route_ip_route_interface_forwarding_list_fwd_list, yang_name="fwd-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='fwd', extensions=None), is_container='list', yang_name="fwd-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='list', is_config=True)""",
        })

    self.__fwd_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fwd_list(self):
    self.__fwd_list = YANGDynClass(base=YANGListType("fwd",yc_fwd_list_cisco_route_static__route_ip_route_interface_forwarding_list_fwd_list, yang_name="fwd-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='fwd', extensions=None), is_container='list', yang_name="fwd-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='list', is_config=True)

  prefix = __builtin__.property(_get_prefix, _set_prefix)
  mask = __builtin__.property(_get_mask, _set_mask)
  fwd_list = __builtin__.property(_get_fwd_list, _set_fwd_list)


  _pyangbind_elements = {'prefix': prefix, 'mask': mask, 'fwd_list': fwd_list, }


class yc_route_cisco_route_static__route(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module cisco-route-static - based on the path /route. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__vrf','__ip_route_interface_forwarding_list',)

  _yang_name = 'route'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__vrf = YANGDynClass(base=YANGListType("name",yc_vrf_cisco_route_static__route_vrf, yang_name="vrf", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="vrf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='list', is_config=True)
    self.__ip_route_interface_forwarding_list = YANGDynClass(base=YANGListType("prefix mask",yc_ip_route_interface_forwarding_list_cisco_route_static__route_ip_route_interface_forwarding_list, yang_name="ip-route-interface-forwarding-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='prefix mask', extensions=None), is_container='list', yang_name="ip-route-interface-forwarding-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'route']

  def _get_vrf(self):
    """
    Getter method for vrf, mapped from YANG variable /route/vrf (list)

    YANG Description: List of VRF static routes
    """
    return self.__vrf
      
  def _set_vrf(self, v, load=False):
    """
    Setter method for vrf, mapped from YANG variable /route/vrf (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vrf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vrf() directly.

    YANG Description: List of VRF static routes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_vrf_cisco_route_static__route_vrf, yang_name="vrf", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="vrf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vrf must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_vrf_cisco_route_static__route_vrf, yang_name="vrf", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="vrf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='list', is_config=True)""",
        })

    self.__vrf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vrf(self):
    self.__vrf = YANGDynClass(base=YANGListType("name",yc_vrf_cisco_route_static__route_vrf, yang_name="vrf", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="vrf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='list', is_config=True)


  def _get_ip_route_interface_forwarding_list(self):
    """
    Getter method for ip_route_interface_forwarding_list, mapped from YANG variable /route/ip_route_interface_forwarding_list (list)

    YANG Description: List of static IP routes. Each destination is uniquely identified by a combination of IP prefix and netmask
    """
    return self.__ip_route_interface_forwarding_list
      
  def _set_ip_route_interface_forwarding_list(self, v, load=False):
    """
    Setter method for ip_route_interface_forwarding_list, mapped from YANG variable /route/ip_route_interface_forwarding_list (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_route_interface_forwarding_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_route_interface_forwarding_list() directly.

    YANG Description: List of static IP routes. Each destination is uniquely identified by a combination of IP prefix and netmask
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("prefix mask",yc_ip_route_interface_forwarding_list_cisco_route_static__route_ip_route_interface_forwarding_list, yang_name="ip-route-interface-forwarding-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='prefix mask', extensions=None), is_container='list', yang_name="ip-route-interface-forwarding-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_route_interface_forwarding_list must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("prefix mask",yc_ip_route_interface_forwarding_list_cisco_route_static__route_ip_route_interface_forwarding_list, yang_name="ip-route-interface-forwarding-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='prefix mask', extensions=None), is_container='list', yang_name="ip-route-interface-forwarding-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='list', is_config=True)""",
        })

    self.__ip_route_interface_forwarding_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_route_interface_forwarding_list(self):
    self.__ip_route_interface_forwarding_list = YANGDynClass(base=YANGListType("prefix mask",yc_ip_route_interface_forwarding_list_cisco_route_static__route_ip_route_interface_forwarding_list, yang_name="ip-route-interface-forwarding-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='prefix mask', extensions=None), is_container='list', yang_name="ip-route-interface-forwarding-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='list', is_config=True)

  vrf = __builtin__.property(_get_vrf, _set_vrf)
  ip_route_interface_forwarding_list = __builtin__.property(_get_ip_route_interface_forwarding_list, _set_ip_route_interface_forwarding_list)


  _pyangbind_elements = {'vrf': vrf, 'ip_route_interface_forwarding_list': ip_route_interface_forwarding_list, }


class cisco_route_static(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module cisco-route-static - based on the path /cisco-route-static. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: IOS XE native static IP route model
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__route',)

  _yang_name = 'cisco-route-static'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__route = YANGDynClass(base=yc_route_cisco_route_static__route, is_container='container', yang_name="route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return []

  def _get_route(self):
    """
    Getter method for route, mapped from YANG variable /route (container)
    """
    return self.__route
      
  def _set_route(self, v, load=False):
    """
    Setter method for route, mapped from YANG variable /route (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_route() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_route_cisco_route_static__route, is_container='container', yang_name="route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """route must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_route_cisco_route_static__route, is_container='container', yang_name="route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='container', is_config=True)""",
        })

    self.__route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_route(self):
    self.__route = YANGDynClass(base=yc_route_cisco_route_static__route, is_container='container', yang_name="route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://cisco.com/ns/yang/ned/ios', defining_module='cisco-route-static', yang_type='container', is_config=True)

  route = __builtin__.property(_get_route, _set_route)


  _pyangbind_elements = {'route': route, }


